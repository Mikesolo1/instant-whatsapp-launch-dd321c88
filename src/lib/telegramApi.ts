
interface TelegramMessage {
  name: string;
  phone: string;
  email?: string;
  message?: string;
  service?: string;
  company?: string;
}

const TELEGRAM_BOT_TOKEN = "7969964492:AAGBBkXJyLlRFeovbv8uZr4fdmgNmuO9gXQ";
const TELEGRAM_CHAT_ID = "7969964492"; // ID —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏

export const sendToTelegram = async (data: TelegramMessage): Promise<boolean> => {
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const text = `
üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!

üë§ –ò–º—è: ${data.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
${data.email ? `‚úâÔ∏è Email: ${data.email}` : ''}
${data.company ? `üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${data.company}` : ''}
${data.service ? `üîß –£—Å–ª—É–≥–∞: ${data.service}` : ''}
${data.message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}` : ''}
`;

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', text);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å CORS
    const proxyUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID —á–∞—Ç–∞
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π ID: 4666180937
    const response = await fetch(proxyUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ID
        text: text,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      const responseData = await response.json();
      console.error('Telegram API error:', responseData);
      return false;
    }
    
    const responseData = await response.json();
    console.log('Telegram API response:', responseData);
    return responseData.ok;
  } catch (error) {
    console.error('Error sending message to Telegram:', error);
    return false;
  }
};
